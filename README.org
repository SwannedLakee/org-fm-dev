
* org-minutes

=org-minutes= supports taking and exporting minutes. =org-minutes= assumes a very simple but effective minutes format consisting of plain lists, where list items can be typed and assigned to participants using the dictionary notation of =org-mode= lists. 

Emacs screenshot:

[[file:example.png]]

Example of PDF export via LaTeX:

[[file:example-export.png]]

** Installation

** Usage

*** The basic list format  

=org-minutes= consist of *one* arbitrarily deeply embedded list, where the topmost level is an enumeration (=1)=, =2)=, ...).  

=org-minutes= items have the following structure

#+BEGIN_EXAMPLE
1) (I:? <TIMESTAMP>? <NAMES>? <SEPARATOR>)? <CONTENT>  
#+END_EXAMPLE

#+BEGIN_EXAMPLE
- (<TYPE>? <TIMESTAMP>? <NAMES>? <SEPARATOR>)? <CONTENT>
#+END_EXAMPLE

which means:
- =<TYPE>= is the type of the item. There is a choice of item types built in:  
   | <TYPE>   | description           |
   |----------+-----------------------|
   | =A:=, =[ ]=  | action/agenda         |
   | =D:=, =E:=   | decision/Entscheidung |
   | =I:=       | information           |
   | =C:=, =B:=   | consultation/Beratung |
   | =N:=       | note                  |
   | =AC:=, =[X]= | cleared               |
- =<TIMESTAMP>= is an (inactive) =org-timestamp=.
- =<NAMES>= is a comma-separated list of participant names.
- =<SEPARATOR>= can be =::= or =||=.
- When =<TYPE>=, =<TIMESTAMP>= or =<NAMES>= are given, there also has to be a =<SEPARATOR>=.
- When =<NAMES>= but not =<TYPE>= is given, the implicit type will be =I:= (information).

*** Inline elements

=org-minutes= also provides two types of inline elements:

| inline element            | description            |
|---------------------------+------------------------|
| enclosed by =?:= and =:?= | question about minutes |
| enclosed by =#:= and =:#= | private comment        |

*** Keywords

There is a number of special =org-minutes= keywords that are used during export:

| keywords                | description                             |
|-------------------------+-----------------------------------------|
| =#+MINUTES_TITLE:=        | title of the document; used as =#+TITLE:= |
| =#+MINUTES_EVENT:=        | name of the event                       |
| =#+MINUTES_PLACE:=        | place of the event                      |
| =#+MINUTES_DATE:=         | date of the event; used as =#+DATE:=      |
| =#+MINUTES_AUTHOR:=       | name of minute taker; used as =#+AUTHOR:= |
| =#+MINUTES_CHAIR:=        | chair of the event                      |
| =#+MINUTES_DRAFT-TEXT:=   | text of the draft watermark             |
| =#+MINUTES_PARTICIPANTS:= | names of participants                   |
| =#+MINUTES_LANGUAGE:=     | language of minutes                     |
| =#+MINUTES_LATEX_STYLE:=  | name of \LaTeX style file               |
| =#+MINUTES_OPTIONS:=      | used as =#+OPTIONS:=                      |

Participants can be included using the drawer =:PARTICIPANTS-LIST:= which is assumed to contain exactly one list. The content of =:PARTICIPANTS-LIST:= will overwrite =#+MINUTES_PARTICIPANTS:=.

*** Example

See [[file:example.org][example.org]].

*** Export

** Plans

- [X] add easy way to include the time
- [X] add automatic expansion of abbreviations
      - instad using links? https://en.wikibooks.org/wiki/LaTeX/Hyperlinks#Hyperlink_and_Hypertarget
            - Full name is given in the link label.
- [ ] activate faces only in headings with minutes?
- [ ] check in and ckeck out participants

#+BEGIN_SRC emacs-lisp
(org-narrow-to-element)
(choose-item)
(add-subitem-with-timestamp-etc)

(defun helm-org-fm-checkout-participant ()
  ""
  (helm :sources (helm-build-in-buffer-source "org-fm participants"
                   :data (current-buffer)
                   :candidate-transformer (lambda (candidates)
																						(progn
																							(forward-line 1)
																							(beginning-of-line)
																							(cl-loop for c in candidates
																											 when (string-match "^[[:blank:]]*-[[:blank:]]+\\[.\\].*" c)
																											 collect c)))
									 :get-line #'buffer-substring)
				:buffer "*helm org-fm*"))
#+END_SRC
